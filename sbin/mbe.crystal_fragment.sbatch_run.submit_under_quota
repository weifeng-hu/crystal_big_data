#!/bin/bash

# Use this bash script to submit fragment calculations for a single crystal.
# This script relies on a previous split operation, done by 
# mbe.crystal_fragment.sbatch_run.full_split_and_submit (without submission)
# or mbe.crystal_fragment.sbatch_run.selection_split_and_submit (also without submission).
# Particularly, this script submits sbatch groups under a given sbatch limit 
# or cap. It will detect the number of currently submitted sbatch jobs, comparing 
# against the quota, and wait until new slots are available.
# Very good to use if the computing system strongly limits users' sbatch quota.

print_help () {

  printf "Use this bash script to submit fragment calculations for a single crystal.\n"
  printf "This script relies on a previous split operation, done by \n"
  printf "mbe.crystal_fragment.sbatch_run.full_split_and_submit (without submission)\n"
  printf "or mbe.crystal_fragment.sbatch_run.selection_split_and_submit (also without submission).\n"
  printf "Particularly, this script submits sbatch groups under a given sbatch limit \n"
  printf "or cap. It will detect the number of currently submitted sbatch jobs, comparing \n"
  printf "against the quota, and wait until new slots are available.\n"
  printf "Very good to use if the computing system strongly limits users' sbatch quota.\n"

  printf "Usage:\n"
  printf "\t bash mbe.crystal_fragment.sbatch_run.submit_under_quota <sbatch queue limit> <start group id(>=0, <#of group_submission_*.sh generated by splitting)> <time interval to retry submitting(in s)>\n"

  exit 0;

}

if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ "$1" == "" ]; then
  print_help
fi

queue_limit=$1
number_of_group=`ls -l group_submission_*.sh | wc -l`
echo queue limit $queue_limit
echo number of group $number_of_group

current_submitted_job_num=0
number_of_current_jobs=0
number_of_jobs_after_submission=0
available_slots=0
go_to_next_group=0
submitted=0
retry=$3
groupid=$2

echo retry time $retry;

while [ $groupid -lt $number_of_group ] ; do

  let go_to_next_group=0;
  while [ $go_to_next_group == 0 ]; do

#     let current_submitted_job_num=`ls -l submitted* | wc -l`;
    let current_submitted_job_num=`squeue -u weifeng | wc -l`;
    let current_submitted_job_num=current_submitted_job_num-1;

    # number of currently submitted jobs < queue_limit
    if test $current_submitted_job_num -lt $queue_limit; then
  
      let available_slots=queue_limit-current_submitted_job_num;
      echo $available_slots new job slots are available ...;
      echo trying to submit group $groupid ...;
  
      let number_of_jobs_to_submit=`cat group_submission_$groupid.sh | wc -l`;

      let submitted=0;  

      while [ $submitted == 0 ]; do 

#         let current_submitted_job_num=`ls -l submitted* | wc -l`;
        let current_submitted_job_num=`squeue -u weifeng | wc -l`
        let current_submitted_job_num=current_submitted_job_num-1;

        let number_of_jobs_after_submission=current_submitted_job_num+number_of_jobs_to_submit;
  
        if test $number_of_jobs_after_submission -le $queue_limit; then 
          echo submitting group $groupid;
          #echo done > submitted_$groupid;
          sh group_submission_$groupid.sh
          sleep 10s;
          let submitted=1;
        else
          let submitted=0;
          echo wait ... still need $(($number_of_jobs_after_submission-$queue_limit)) slots before submit;
          sleep $retry;
        fi
      done 
  
      let go_to_next_group=1
  
    else
      # number of currently submitted jobs >= queue_limit
      echo there is no new job slots available ... 
      # sleep for ($retry) seconds
      sleep $retry;
      let go_to_next_group=0 
    fi

  done

  let groupid=groupid+1

done

echo all jobs submitted!

#!/bin/bash

# Use the bash script to canonicalize crystal unit cell coordinates
# Coordinate canonicalization means aligning the a vector with the 
# x axis, before doing fragment generation calculations
# This script performs coordinate canonicalization for a crystal group. 
# For each crystal, a .coord file (unit cell coordinates) and 
# a .const file(crystal constants) must be provided under each crystal 
# directory

args=${1}

# define the crystal names, actually the handlers
declare -a directories
directories=""

if test "${args}" == "all"; then
  directories=(`find . -maxdepth 1 -type d`);
else
  directories=(${args})
fi

declare -a crystal_dir
# check whether files are there:
# reference const, coord
# xyz (blank line stripped)
count=0;
for i in ${directories[@]}; do
  # try to find whether any xyz in a directory
  result=`find $i -maxdepth 1 -type f -name *.xyz`
  if test "${result}" != ""; then
    # if yes, then add it to the crystal dir
    echo found a target crystal directory ...  ${i};
    crystal_dir[${count}]=${i}
    let count=count+1;
  fi
done

print_help() {

  printf "Use the bash script to canonicalize crystal unit cell coordinates\n"
  printf "Coordinate canonicalization means aligning the a vector with the \n"
  printf "x axis, before doing fragment generation calculations\n"
  printf "This script performs coordinate canonicalization for a crystal group.\n"
  printf "For each crystal, a .coord file (unit cell coordinates) and \n"
  printf "a .const file(crystal constants) must be provided under each crystal \n"
  printf "directory\n"

  printf "Usage:\n"
  printf "\t bash mbe.crystal_group.shell_run.canonicalize_coordinate <directories, or use 'all' to indicate all subdirs here>\n"

  exit 0;

}

# a function to output the actual python script, for later comparing the used geom again exp geom
write_canonicalize_py() {

  lattice_name=${1}
  xyz_file=${2}
  natom=${3}
  python_script_path=${4}

  echo writing python script for ${lattice_name} to ${python_script_path}

  echo "from structure.api import unit_cell_canonicalize_config;" >> ${python_script_path}
  echo "new_config = unit_cell_canonicalize_config.UnitCellCanonicalizeConfig();" >> ${python_script_path}
  echo "">> ${python_script_path}
  echo "new_config.lattice_name = \"${lattice_name}\";"  >> ${python_script_path}
  echo "new_config.input_file_name = \"./${xyz_file}\";" >> ${python_script_path}
  echo "new_config.reference_lattice_constants_file_name = \"./${lattice_name}.const\";" >> ${python_script_path}
  echo "new_config.reference_xyz_file_name = \"./${lattice_name}.coord\";" >> ${python_script_path}
  echo "new_config.bond_length_limit = 1.6e0;" >> ${python_script_path}
  echo "new_config.reference_unit_cell.natom = ${natom};" >> ${python_script_path}
  echo "new_config.unknown_unit_cell.natom = ${natom};" >> ${python_script_path}
  echo "" >> ${python_script_path}
  echo "from structure.api import unit_cell_canonicalize;" >> ${python_script_path}
  echo "unit_cell_canonicalize.perform( new_config );" >> ${python_script_path}

}

# for each directory
# 1. create a working directory and copying stuff in there, we don't touch the original files
# 2. remove the duplication against .txt from ccdc
# 3. write python code and execute against .xyz but according to the  .coord generated by 2

( mkdir -p gjf; exit 0; )

for i in ${crystal_dir[*]}; do

  # name the working directory
  working_dir="${i}_working";
  echo creating working directory ${working_dir} for ${i}
  ( mkdir -p ${working_dir} )

  # name the actual csd from the dir
  csd=`sed -e 's:\.\/::' <<< "${i}"`
  echo identified the crystal csd as  ${csd}

  # don't touch the original
  # so copy them to the working dir 
  echo copying stuff to ${working_dir}
  ( cp ${csd}/* ${working_dir} ; exit 0; )

  # We don't have to do this because these txt files are already started with csd
  # rename the .txt file in working dir, let it start with the csd number
  # txt_file=`find ${working_dir}/*.txt`

  target_txt_file="${csd}.txt"

  # mv_command_line="mv ${txt_file} ${working_dir}/${target_txt_file}"
  # echo ${mv_command_line} 

  # remove the duplicated atoms, this step should not exist but
  # thanks to the flawed CCDC's Jave env
  # these will generate a standard .coord file
  echo experimental geom data is in ${target_txt_file}
  echo removing atom duplications ...
  ( cd ${working_dir}; ${IQUADS_ROOT}/src/structure/test/test_duplication_remover/duplication_remover ${target_txt_file} 1.6;\
    mv ${target_txt_file}.coord ${csd}.coord;\
    exit 0; )

  # write the python script
  xyz_path=`find ${working_dir}/*.xyz`
  echo found target geometry path ${xyz_path}

  natom=`read x < ${xyz_path}; echo ${x}`
  echo natom = ${natom}

  xyz_file=`sed -e "s:${working_dir}::" -e 's:\/::' <<< "${xyz_path}" `
  echo found target geometry file ${xyz_file}

  # canonicalize the target geometry
  echo canonicalizing the target geometry against experimental geometry ...
  py_script_path="${working_dir}/${csd}.py"
  write_canonicalize_py ${csd} ${xyz_file} ${natom} ${py_script_path}

  ( cd ${working_dir}; python "${csd}.py"; exit 0 )

done

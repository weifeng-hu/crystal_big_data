#!/bin/bash

# Use this bash script to submit fragment calculations for a 
# crystal group.
# This script relies on a previous split operation, done by 
# mbe.crystal_group.sbatch_run.check_split_and_resubmit (without submission)
# Particularly, this script submits sbatch groups under a given sbatch limit
# or cap. It will detect the number of currently submitted sbatch jobs, compare against the sbatch quota, and wait until new sbatch slots are available.
# Very good to use if the computing system strongly limits users' sbatch quota.

print_help() {

  printf "Use this bash script to submit fragment calculations for a \n"
  printf "crystal group.\n"
  printf "This script relies on a previous split operation, done by \n"
  printf "mbe.crystal_group.sbatch_run.check_split_and_resubmit (without submission)\n"
  printf "Particularly, this script submits sbatch groups under a given sbatch limit\n"
  printf "or cap. It will detect the number of currently submitted sbatch jobs, compare against the sbatch quota, and wait until new sbatch slots are available.\n"
  printf "Very good to use if the computing system strongly limits users' sbatch quota.\n"

  printf "Options\n"
  printf "         --directory=<directory>\n"
  printf "         --limit=<job limit, curicial>\n"
  printf "         --thread=<#jobs to run at the same time>\n"
  printf "         --walltime=<walltime for each job>\n"

}

# end of function

directory=""
limit=2000;
thread=50
walltime=06:00:00

for key in "$@"; do

  case $key in
    --directory=*)
    directory="${key#*=}"
    shift
    ;;
    --limit=*)
    limit="${key#*=}"
    shift
    ;;
    --thread=*)
    thread="${key#*=}"
    shift
    ;;
    --walltime=*)
    walltime="${key#*=}"
    shift
    ;;
    *)
    echo unknown keyword ${key}
    print_help
    exit 1
  esac

done


if [ "${directory}" == "" ]; then
  printf "working directory not set\n"
  print_help
  exit 1
fi

if [ ! -d ${directory} ]; then
  printf "cannot find target directory ${directory}\n"
  exit 1
fi

printf "work directory: ${directory}\n"
printf "limit: ${limit}\n"
printf "thread: ${thread}\n"
printf "walltime: ${walltime}\n"

target_subdirs=(`find ./${directory}/*/*/*/input -type d` )

for subdir in ${target_subdirs[@]}; do
   printf "performing sbatch submission in ${subdir} ..."
   ( cd ${subdir};\
     bash sbatch_split 50000 ${thread} N ${walltime};\
     bash sbatch_auto_submission ${limit} 0 300;\
     exit 0 )
   printf "done\n"
done

